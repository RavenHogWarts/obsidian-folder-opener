name: Build and Release

on:
  push:
    tags:
      - '*'
  workflow_dispatch:  # 允许手动触发

permissions:
  contents: write
  discussions: write

jobs:
  build:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Clean old build files
      run: |
        if (Test-Path "dist") { Remove-Item -Recurse -Force "dist" }
        if (Test-Path "build") { Remove-Item -Recurse -Force "build" }
        if (Test-Path "*.spec") { Remove-Item -Force "*.spec" }
        
    - name: Build main executable
      run: |
        Write-Host "正在构建主程序 (open_folder_with_obsidian.exe)..."
        if (Test-Path "src\app-icon.ico") {
          pyinstaller --onefile --windowed --icon=src\app-icon.ico --name=open_folder_with_obsidian src/main.py
        } else {
          Write-Host "[警告] 未找到src\app-icon.ico图标文件，使用默认图标"
          pyinstaller --onefile --windowed --name=open_folder_with_obsidian src/main.py
        }
        
    - name: Build installer executable
      run: |
        Write-Host "正在构建安装程序 (obsidian_installer.exe)..."
        if (Test-Path "src\app-icon.ico") {
          pyinstaller --onefile --windowed --icon=src\app-icon.ico --name=obsidian_installer src/installer.py
        } else {
          Write-Host "[警告] 未找到src\app-icon.ico图标文件，使用默认图标"
          pyinstaller --onefile --windowed --name=obsidian_installer src/installer.py
        }
        
    - name: Clean build artifacts
      run: |
        if (Test-Path "build") { Remove-Item -Recurse -Force "build" }
        if (Test-Path "*.spec") { Remove-Item -Force "*.spec" }
        
    - name: Create version info
      run: |
        $VERSION = $env:GITHUB_REF -replace "refs/tags/", ""
        if (-not $VERSION) { $VERSION = "dev" }
        
        $BUILD_TIME = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
        $COMMIT_SHA = $env:GITHUB_SHA
        
        $README_LINES = @(
          "Obsidian文件夹打开器 $VERSION",
          "",
          "构建时间: $BUILD_TIME",
          "提交: $COMMIT_SHA",
          "",
          "文件说明:",
          "- open_folder_with_obsidian.exe: 主程序，用于打开文件夹",
          "- obsidian_installer.exe: 安装程序，用于设置右键菜单",
          "",
          "使用方法:",
          "1. 以管理员身份运行 obsidian_installer.exe 进行安装",
          "2. 安装完成后即可在任意文件夹右键选择用Obsidian打开",
          "",
          "卸载方法:",
          "在Obsidian安装目录运行 remove_obsidian_context_menu.reg 文件"
        )
        
        $README_LINES | Out-File -FilePath "dist\README.md" -Encoding UTF8
        
    - name: Create zip package
      run: |
        $VERSION = $env:GITHUB_REF -replace "refs/tags/", ""
        if (-not $VERSION) { $VERSION = "dev" }
        
        Set-Location dist
        Compress-Archive -Path "*.exe", "*.md" -DestinationPath "obsidian-folder-opener-${VERSION}.zip" -Force
        Set-Location ..
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: obsidian-folder-opener-windows
        path: dist/
        
    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ github.ref_name }}
        name: Release ${{ github.ref_name }}
        draft: false
        prerelease: false
        generate_release_notes: true
        discussion_category_name: "Announcements"
        body: |
          ## Obsidian文件夹打开器 ${{ github.ref_name }}          
          ---
        files: |
          dist/obsidian-folder-opener-*.zip
          dist/open_folder_with_obsidian.exe
          dist/obsidian_installer.exe
          dist/README.md
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
